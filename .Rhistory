max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as.Date(appts$AppointmentDate)
appts$AppointmentRegistration <- as.Date(appts$AppointmentRegistration)
# finding the difference in days between the date of registration and the
# actual appointment
appts$dayDifference <- as.numeric(appts$AppointmentDate -
appts$AppointmentRegistration)
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
nrow(appts[appts$Status == "Show-Up",])
# 90732 records are of patients that did NOT show up for their
# scheduled appointment
summary(appts[appts$Status == "No-Show",])
nrow(appts[appts$Status == "No-Show",])
## Investigating the computed dayDifference variable
summary(appts$dayDifference)
# the day difference ranges from 1 day to 398 days!!
range(appts$dayDifference)  # the resulting range is 1 to 398 days
398/365
398 - 365
# finding the upper and lower fence values of dayDifference column
age_upper_fence <- 20 + (1.5 * IQR(appts$dayDifference))  # 44
age_lower_fence <- 4 - (1.5 * IQR(appts$dayDifference))  # -20
## scatter plot, Age by dayDifference
plot(Age, dayDifference, data = appts)
## scatter plot, Age by dayDifference
plot(appts$Age, appts$dayDifference)
age_upper_fence
age_lower_fence
nrow(appts[appts$dayDifference > age_upper_fence, ])  # 11,148 records
(nrow(appts[appts$dayDifference > age_upper_fence, ]) / nrow(appts)) * 100
prop.table(appts$Gender, Status)
prop.table(appts$Gender, appts$Status)
prop.table(table(appts$Gender, appts$Status)
prop.table(table(appts$Gender, appts$Status))
prop.table(table(appts$Gender, appts$Status))
table(appts$Gender)
prop.table(table(appts$Gender))
names(appts)
# proportion of those that turned up with or without SMS
prop.table(table(appts$Stats, appts$Sms_Reminder))
# proportion of those that turned up with or without SMS
prop.table(table(appts$Status, appts$Sms_Reminder))
# proportion of those that turned up with or without SMS
table(appts$Status, appts$Sms_Reminder)
prop.table(table(appts$Status, appts$Scholarship))
table(appts$Status, appts$Scholarship)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
diff_in_weeks = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "weeks"))
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "months"))
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in)days)
mystats(diff_in_days)
mystats(diff_in_weeks)
# prevent display of numbers in scientific notation
options(scipen = 999)
mystats(diff_in_weeks)
mystats(diff_in_months)
## Import libraries
require(ggplot2)
require(tidyverse)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as.Date(appts$AppointmentDate)
appts$AppointmentRegistration <- as.Date(appts$AppointmentRegistration)
# finding the difference in days between the date of registration and the
# actual appointment
# appts$dayDifference <- as.numeric(appts$AppointmentDate -
#                                     appts$AppointmentRegistration)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
mystats(diff_in_days)
diff_in_weeks = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "weeks"))
mystats(diff_in_weeks)
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
## Combining the appts data to the difference in weeks
rename(apptDifference, diff_in_months)
## Combining the appts data to the difference in weeks
rename(diff_in_months, apptDifference)
## Combining the appts data to the difference in weeks
rename(as.numeric(diff_in_months), apptDifference)
## Combining the appts data to the difference in weeks
apptDifference <- diff_in_weeks
rm(c(diff_in_days, diff_in_months, diff_in_weeks))
rm(c("diff_in_days", "diff_in_months", "diff_in_weeks"))
rm(diff_in_days)
rm(diff_in_weeks)
rm(diff_in_months)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, appt)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, apptDifference)
rm(apptDifference)
## Import libraries
require(ggplot2)
require(tidyverse)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as.Date(appts$AppointmentDate)
appts$AppointmentRegistration <- as.Date(appts$AppointmentRegistration)
# finding the difference in days between the date of registration and the
# actual appointment
# appts$dayDifference <- as.numeric(appts$AppointmentDate -
#                                     appts$AppointmentRegistration)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
mystats(diff_in_days)
diff_in_weeks = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "weeks"))
mystats(diff_in_weeks)
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
## Combining the appts data to the difference in weeks
apptDifference <- diff_in_weeks
rm(diff_in_days)
rm(diff_in_weeks)
rm(diff_in_months)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, apptDifference)
rm(apptDifference)
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts$Status[appts$Status == "Show-Up",])
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
nrow(appts[appts$Status == "Show-Up",])
# 90732 records are of patients that did NOT show up for their
# scheduled appointment
summary(appts[appts$Status == "No-Show",])
nrow(appts[appts$Status == "No-Show",])
# scatter plot, Age by dayDifference
plot(appts$Age, appts$dayDifference)
# getting statistical data about dayDifference
# the day difference ranges from 1 day to 398 days!! Or up to 1 year and 1 month!
range(appts$dayDifference)  # the resulting range is 1 to 398 days
View(appts)
View(appts)
View(appts)
## Import libraries
require(ggplot2)
require(tidyverse)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as.Date(appts$AppointmentDate)
appts$AppointmentRegistration <- as.Date(appts$AppointmentRegistration)
# finding the difference in days between the date of registration and the
# actual appointment
# appts$dayDifference <- as.numeric(appts$AppointmentDate -
#                                     appts$AppointmentRegistration)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
mystats(diff_in_days)
diff_in_weeks = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "weeks"))
mystats(diff_in_weeks)
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
## Combining the appts data to the difference in weeks
apptDifference <- diff_in_weeks
rm(diff_in_days)
rm(diff_in_weeks)
rm(diff_in_months)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, apptDifference)
rm(apptDifference)
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
nrow(appts[appts$Status == "Show-Up",])
# 90732 records are of patients that did NOT show up for their
# scheduled appointment
summary(appts[appts$Status == "No-Show",])
nrow(appts[appts$Status == "No-Show",])
# scatter plot, Age by dayDifference
plot(appts$Age, appts$dayDifference)
install.packages("reshape2")
library(rehape2)
library(reshape2)
melted_corr_mat <- metl(corr_mat)
melted_corr_mat <- melt(corr_mat)
melted_corr_mat <- melt(corr_mat)
## Correlation matrix
corr_mat <- round(cor(appts[,5:11]),2)
corr_mat
typeof(corr_mat)
library(ggplot2)
melted_corr_mat <- melt(corr_mat)
ggplot(data = corr_mat) +
geom_tile()
ggplot(data = melted_corr_mat) +
geom_tile()
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile()``
ggplot(data = melted_corr_mat, aes(x=Var1, y=Var2,
fill=value)) +
geom_tile()
View(appts)
########################################################
mystats(appts$Diabetes)
## Import libraries
require(ggplot2)
require(tidyverse)
########################################################
mystats(appts$Diabetes)
# prevent display of numbers in scientific notation
options(scipen = 999)
########################################################
mystats(appts$Diabetes)
mystats(appts$Alcoholism)
mystats(appts$HyperTension)
mystats(appts$Handicap)
nrow(appts[appts$Handicap > 1,])
mystats(appts$Smokes)
mystats(appts$Scholarship)
mystats(appts$Scholarship)
mystats(appts$Tuberculosis)
Show-up <- appts[appts$Status == "Show-Up",]
Show-up <- appts[appts$Status == "Show-Up",]
No-Show <- appts[appts$Status == "No-Show",]
myStats(appts$Status)
myStats(appts$Status)
mystats(appts$Status)
duplicated(appts)
which(duplicated(appts))
nrow(which(duplicated(appts)))
nrow(which(duplicated(appts)))
appts_clean <-  appts[!duplicated(appts)]
appts_clean <-  appts[!duplicated(appts),]
287250 / 300000
num_appts = sapply(appts, is.numeric)
num_col = hr[num_appts]
num_col = appts[num_appts]
names(num_col)
test <- apply(num_col, 2, mystats)
diag_stats <- t(data.frame(test))
View(diag_stats)
