diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
## Combining the appts data to the difference in weeks
apptDifference <- diff_in_weeks
rm(diff_in_days)
rm(diff_in_weeks)
rm(diff_in_months)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, apptDifference)
rm(apptDifference)
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts$Status[appts$Status == "Show-Up",])
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
nrow(appts[appts$Status == "Show-Up",])
# 90732 records are of patients that did NOT show up for their
# scheduled appointment
summary(appts[appts$Status == "No-Show",])
nrow(appts[appts$Status == "No-Show",])
# scatter plot, Age by dayDifference
plot(appts$Age, appts$dayDifference)
# getting statistical data about dayDifference
# the day difference ranges from 1 day to 398 days!! Or up to 1 year and 1 month!
range(appts$dayDifference)  # the resulting range is 1 to 398 days
View(appts)
View(appts)
View(appts)
## Import libraries
require(ggplot2)
require(tidyverse)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as.Date(appts$AppointmentDate)
appts$AppointmentRegistration <- as.Date(appts$AppointmentRegistration)
# finding the difference in days between the date of registration and the
# actual appointment
# appts$dayDifference <- as.numeric(appts$AppointmentDate -
#                                     appts$AppointmentRegistration)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
mystats(diff_in_days)
diff_in_weeks = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "weeks"))
mystats(diff_in_weeks)
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
## Combining the appts data to the difference in weeks
apptDifference <- diff_in_weeks
rm(diff_in_days)
rm(diff_in_weeks)
rm(diff_in_months)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, apptDifference)
rm(apptDifference)
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
nrow(appts[appts$Status == "Show-Up",])
# 90732 records are of patients that did NOT show up for their
# scheduled appointment
summary(appts[appts$Status == "No-Show",])
nrow(appts[appts$Status == "No-Show",])
# scatter plot, Age by dayDifference
plot(appts$Age, appts$dayDifference)
choose_dir()
choose.dir()
setwd(choose.dir())
png("Output/ApptDifference.png")
hist(appts$apptDifference, xlim = c(0, 10), ks = 50,
main = "Histogram of Appointment Difference in Weeks",
xlab = "Difference in Weeks", ylab = "Frequency Count",
prob = TRUE)
# plotting probability distribution in Red
lines(density(appts$apptDifference), lwd = 2, col = "red")
dev.off()
## Import libraries
require(ggplot2)
require(tidyverse)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
View(appts)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as.DateTime(appts$AppointmentDate)
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as_datetime(appts$AppointmentDate)
??as.DateTIme
??as.data.frame.difftime
??as_datetime
??POSIXct
## Import libraries
require(ggplot2)
require(tidyverse)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
View(appts)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
## Working with the date columns and generating a third
# type casting the date variables as type Date
appts$AppointmentDate <- as_datetime(appts$AppointmentDate)
require(caret)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
temp1_df <- appts[,c(Gender, Status)]
temp1_df <- appts[,c(appts$Gender, appts$Status)]
View(temp1_df)
source("D:/arifin.othman/Simplilearn/PG DS - R Programming for Data Science/Assignment_1/Code/Part-1.R")
require(ggplot2)
require(tidyverse)
require(caret)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
appts[,c(appts$Gender, appts$Status)]
appts[,(appts$Gender, appts$Status)]
appts[,[appts$Gender,appts$Status]
# temp1_df <- appts[,(appts$Gender, appts$Status)]
subset(appts, keep = c("Gender","Status"))
?keep
appts[, c(2, 13)]
# temp1_df <- appts[,(appts$Gender, appts$Status)]
#subset(appts, keep = c("Gender","Status"))
table(appts[, c(2, 13)])
?per
?percent_rank
per.cnt
# temp1_df <- appts[,(appts$Gender, appts$Status)]
#subset(appts, keep = c("Gender","Status"))
status_by_gender <- table(appts[, c(2, 13)])
status_by_gender
?barplot
barplotGender ~ Status, data = appts)
barplot(Gender ~ Status, data = appts)
barplot(Status ~ Gender, data = appts)
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(status, Gender))
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(Status, Gender))
b + geom_col()
b + geom_col()
a + geom_col()
a + geom_countl()
a + geom_bar()
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(Status))
a + geom_bar()
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status")
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(y = Status))
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(Status))
a + geom_bar(position = "fill") +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
i <- ggplot(appts, aes(date, Status)) +
geom_area()
ggplot(appts, aes(date, Status)) +
geom_area()
ggplot(appts, aes(AppointmentDate, Status)) +
geom_area()
View(appts)
Show-Up <- appts[appts$Status == "Show-Up",]
# 90732 records are of patients that did NOT show up for their
# scheduled appointment
summary(appts[appts$Status == "No-Show",])
Show_Up <- appts[appts$Status == "Show-Up",]
ggplot(appts, aes(AppointmentDate, Status)) +
geom_area()
ggplot(Show_Up, aes(AppointmentDate, Status)) +
geom_area()
source("~/SimpliLearn/PG DS - R For Data Science/Assignment_1/r_assignment_1/Code/Part-1.R", echo=TRUE)
# finding the difference in days between the date of registration and the
# actual appointment
# appts$dayDifference <- as.numeric(appts$AppointmentDate -
#                                     appts$AppointmentRegistration)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
mystats(diff_in_days)
mystats(appts$Diabetes)
mystats(appts$Alcoholism)
mystats(appts$HyperTension)
mystats(appts$Handicap)
mystats(appts$Smokes)
mystats(appts$Handicap)
mystats(appts$Scholarship)
mystats(appts$Tuberculosis)
nrow(appts[appts$Handicap > 1,])
nrow(appts[appts$Handicap > 2,])
nrow(appts[appts$Handicap > 3,])
nrow(appts[appts$Handicap > 4,])
# *****************************************************************
b <- appts
b$Handicap[appts$Handicap > 1] = 1
mystats[b$Handicap]
mystats(b$Handicap)
mystats(appts$Sms_Reminder)
table(appts$Sms_Reminder)
table(appts$Sms_Reminder ~ appts$Status)
table(appts$Sms_Reminder) * 100 / length(appts)
table(appts$Sms_Reminder) * 100 / nrow(appts)
c <- table(appts$Sms_Reminder) * 100 / nrow(appts)
c
c <- as.dataframe(table(appts$Sms_Reminder) * 100 / nrow(appts))
c <- as_dataframe(table(appts$Sms_Reminder) * 100 / nrow(appts))
c <- as.data.frame(table(appts$Sms_Reminder) * 100 / nrow(appts))
typeof(c)
?pie
pie(c)
c <- table(appts$Sms_Reminder) * 100 / nrow(appts)
pie(c)
pie(c, col = rainbow(3), radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(3),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(24),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(6),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(5),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(12),
radius = 1)
pie(c, col = rainbow(3), radius = 1)
?table
?crosstab
crosstab(appts, row.vars = "Status", col.vars = "SMS_Reminder")
??crosstab
require(stats)
xtab(SMS_Reminder ~ Status, data = appts)
xtabs(SMS_Reminder ~ Status, data = appts)
xtabs(Sms_Reminder ~ Status, data = appts)
xtabs(~ Status + Sms_Reminder, data = appts)
