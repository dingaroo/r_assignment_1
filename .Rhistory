subset(appts, keep = c("Gender","Status"))
?keep
appts[, c(2, 13)]
# temp1_df <- appts[,(appts$Gender, appts$Status)]
#subset(appts, keep = c("Gender","Status"))
table(appts[, c(2, 13)])
?per
?percent_rank
per.cnt
# temp1_df <- appts[,(appts$Gender, appts$Status)]
#subset(appts, keep = c("Gender","Status"))
status_by_gender <- table(appts[, c(2, 13)])
status_by_gender
?barplot
barplotGender ~ Status, data = appts)
barplot(Gender ~ Status, data = appts)
barplot(Status ~ Gender, data = appts)
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(status, Gender))
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(Status, Gender))
b + geom_col()
b + geom_col()
a + geom_col()
a + geom_countl()
a + geom_bar()
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(Status))
a + geom_bar()
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status")
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(y = Status))
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(Status))
a + geom_bar(position = "fill") +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
i <- ggplot(appts, aes(date, Status)) +
geom_area()
ggplot(appts, aes(date, Status)) +
geom_area()
ggplot(appts, aes(AppointmentDate, Status)) +
geom_area()
View(appts)
Show-Up <- appts[appts$Status == "Show-Up",]
# 90732 records are of patients that did NOT show up for their
# scheduled appointment
summary(appts[appts$Status == "No-Show",])
Show_Up <- appts[appts$Status == "Show-Up",]
ggplot(appts, aes(AppointmentDate, Status)) +
geom_area()
ggplot(Show_Up, aes(AppointmentDate, Status)) +
geom_area()
source("~/SimpliLearn/PG DS - R For Data Science/Assignment_1/r_assignment_1/Code/Part-1.R", echo=TRUE)
# finding the difference in days between the date of registration and the
# actual appointment
# appts$dayDifference <- as.numeric(appts$AppointmentDate -
#                                     appts$AppointmentRegistration)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
mystats(diff_in_days)
mystats(appts$Diabetes)
mystats(appts$Alcoholism)
mystats(appts$HyperTension)
mystats(appts$Handicap)
mystats(appts$Smokes)
mystats(appts$Handicap)
mystats(appts$Scholarship)
mystats(appts$Tuberculosis)
nrow(appts[appts$Handicap > 1,])
nrow(appts[appts$Handicap > 2,])
nrow(appts[appts$Handicap > 3,])
nrow(appts[appts$Handicap > 4,])
# *****************************************************************
b <- appts
b$Handicap[appts$Handicap > 1] = 1
mystats[b$Handicap]
mystats(b$Handicap)
mystats(appts$Sms_Reminder)
table(appts$Sms_Reminder)
table(appts$Sms_Reminder ~ appts$Status)
table(appts$Sms_Reminder) * 100 / length(appts)
table(appts$Sms_Reminder) * 100 / nrow(appts)
c <- table(appts$Sms_Reminder) * 100 / nrow(appts)
c
c <- as.dataframe(table(appts$Sms_Reminder) * 100 / nrow(appts))
c <- as_dataframe(table(appts$Sms_Reminder) * 100 / nrow(appts))
c <- as.data.frame(table(appts$Sms_Reminder) * 100 / nrow(appts))
typeof(c)
?pie
pie(c)
c <- table(appts$Sms_Reminder) * 100 / nrow(appts)
pie(c)
pie(c, col = rainbow(3), radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(3),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(24),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(6),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(5),
radius = 1)
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(12),
radius = 1)
pie(c, col = rainbow(3), radius = 1)
?table
?crosstab
crosstab(appts, row.vars = "Status", col.vars = "SMS_Reminder")
??crosstab
require(stats)
xtab(SMS_Reminder ~ Status, data = appts)
xtabs(SMS_Reminder ~ Status, data = appts)
xtabs(Sms_Reminder ~ Status, data = appts)
xtabs(~ Status + Sms_Reminder, data = appts)
gc()
require(ggplot2)
require(tidyverse)
require(caret)
require(stats)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
rm(working_dir)  # removing the variable from memeory space
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
gc()
## Import libraries
require(ggplot2)
require(tidyverse)
require(caret)
require(stats)
# prevent display of numbers in scientific notation
options(scipen = 999)
## user written function for creating descriptive statistics
mystats <- function(x) {
nmiss <- sum(is.na(x))
a <- x[!is.na(x)]
m <- mean(a)
n <- length(a)
s <- sd(a)
min <- min(a)
# p1 <- quantile(a, 0.01)
# p5 <- quantile(a, 0.05)
# p10 <- quantile(a, 0.10)
q1 <- quantile(a, 0.25)
q2 <- quantile(a, 0.5)
q3 <- quantile(a, 0.75)
# p90 <- quantile(a, 0.90)
# p95 <- quantile(a, 0.95)
# p99 <- quantile(a, 0.99)
max <- max(a)
UC <- m + 3 * s  # upper fence
LC <- m - 3 * s  # lower fence
outlier_flag <- max > UC | min < LC
return(
c(
n = n,
nmiss = nmiss,
outlier_flag = outlier_flag,
mean = m,
stdev = s,
min = min,
# p1 = p1,
# p5 = p5,
# p10 = p10,
q1 = q1,
q2 = q2,
q3 = q3,
# p90 = p90,
# p95 = p95,
# p99 = p99,
max = max,
UC = UC,
LC = LC
)
)
}
## Set working directory
working_dir <- choose.dir()  # prompt user for location of home directory
setwd(working_dir)  # setting the home directory
rm(working_dir)  # removing the variable from memeory space
getwd()  # verifying the home directory
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
# getting to know the dataset
dim(appts)  # 300000 observations by 13 variables/features
names(appts)  # headers/names of the 13 variables/features
str(appts)  # querying the structure of the dataset
summary(appts)  # getting a summary of all 13 features
head(appts)  # show top 5 observations
tail(appts)  # show bottom 5 observations
appts[is.na(appts)]   # checking for any missing data = 0
# *****************************************************************
# *                   verify binary data
# *****************************************************************
mystats(appts$Diabetes)
mystats(appts$Alcoholism)
mystats(appts$HyperTension)
mystats(appts$Handicap)
mystats(appts$Smokes)
mystats(appts$Handicap)
mystats(appts$Scholarship)
mystats(appts$Tuberculosis)
mystats(appts$Sms_Reminder)
table(appts$Sms_Reminder ~ appts$Status)
table(appts$Sms_Reminder ~ appts$Status)
# pie chart of sms reminders sent
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(12),
radius = 1)
xtabs(~ Status + Sms_Reminder, data = appts)
print(xtabs(~ Status + Sms_Reminder, data = appts))
# identify number of records with more than 1 type of handicaps
nrow(appts[appts$Handicap > 4,])   # 499 records had handicap value not set to
# identify number of records with more than 1 type of handicaps
nrow(appts[appts$Handicap > 4,])   # 499 records had handicap value not set to
# Reading the data
# Setting any text variable as a Factor, i.e., the Gender as well
# as the Status varaible
appts <- read.csv("Data/appointments.csv", stringsAsFactors = TRUE)
mystats(appts$Handicap)    # has a max of 4
# pie chart of sms reminders sent
pie(table(appts$Sms_Reminder) * 100 / nrow(appts),
col = rainbow(12),
radius = 1)
# identify number of records with more than 1 type of handicaps
nrow(appts[appts$Handicap > 1,])   # 499 records had handicap value not set to
# ****************************************************************
# * Normalize the data for Handicaps to just 1, so it is either yes or no
# ****************************************************************
appts$Handicap[appts$Handicap > 1] = 1
mystats(appts$Handicap)
# *****************************************************************
# * Breakdown of those who turned up or not, by gender
# *****************************************************************
status_by_gender <- table(appts[, c(2, 13)])
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(Status))
a + geom_bar(position = "fill") +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
Show_Up <- appts[appts$Status == "Show-Up",]
ggplot(Show_Up, aes(AppointmentDate, Status)) +
geom_area()
ggplot(Show_Up, aes(AppointmentDate, Status)) +
geom_bar()
Show_Up <- appts[appts$Status == "Show-Up",]
ggplot(Show_Up, aesG(Gender), Status)) +
geom_barG
geom_bar()
ggplot(Show_Up, aes(Gender, Status)) +
geom_bar()
ggplot(Show_Up, aes(Gender)) +
geom_bar()
ggplot(Show_Up, aes(Gender)) +
geom_bar() +
main("Bar Plot of patients that showed up and their gender breakdown")
# ******************************************************************
# * Creating Show_Up and No_Show subsets of data
# ******************************************************************
Show_Up <- appts[appts$Status == "Show-Up",]
ggplot(Show_Up, aes(Gender)) +
geom_bar(v) +
main("Bar Plot of patients that showed up and their gender breakdown")
# *****************************************************************
# * Breakdown of those who turned up or not, by gender
# *****************************************************************
status_by_gender <- table(appts[, c(2, 13)])
# barplot(Status ~ Gender, data = appts)
a <- ggplot(appts, aes(y = Status))
a + geom_bar() +
labs(x = "Appointment Status", y = "Count of Status", title = "Bar Graph of Status") +
theme_classic()
# ******************************************************************
# * Creating Show_Up and No_Show subsets of data
# ******************************************************************
Show_Up <- appts[appts$Status == "Show-Up", ]
No_Show <- appts[appts$Status == "No-Show", ]
ggplot(Show_Up, aes(Gender)) +
geom_bar(v) +
main("Bar Plot of patients that showed up and their gender breakdown")
ggplot(Show_Up, aes(Gender)) +
geom_bar() +
main("Bar Plot of patients that showed up and their gender breakdown")
ggplot(Show_Up, aes(Gender)) +
geom_bar(main("Bar Plot of patients that showed up and their gender breakdown"))
ggplot(Show_Up, aes(Gender)) +
geom_bar(main = "Bar Plot of patients that showed up and their gender breakdown")
barplot(Show_Up)
barplot(appts$Status)
No_Show <- appts[appts$Status == "No-Show", ]
ggplot(appts, aes(Status)) +
geom_bar(main = "Bar Plot of patients that showed up and their gender breakdown")
require(ggplot2)
require(ggmosaic)
require(tidyverse)
require(caret)
require(stats)
ggplot(appts, aes(Status)) +
geom_bar(main = "Bar Plot of patients that showed up and their gender breakdown")
ggplot(appts, aes(Status)) +
geom_col(main = "Bar Plot of patients that showed up and their gender breakdown")
# finding the difference in days between the date of registration and the
# actual appointment
# appts$dayDifference <- as.numeric(appts$AppointmentDate -
#                                     appts$AppointmentRegistration)
diff_in_days = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days"))
mystats(diff_in_days)
diff_in_weeks = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "weeks"))
mystats(diff_in_weeks)
# prevent display of numbers in scientific notation
options(scipen = 999)
mystats(diff_in_weeks)
diff_in_months = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "days")) / (365.25 / 12)
mystats(diff_in_months)
## Removing redundant calulated lists
rm(diff_in_days)
rm(diff_in_weeks)
rm(diff_in_months)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, apptDifference)
rm(apptDifference)
## Working on the determining the split ratio between ShowUp and NoShow
# 209269 records are of patients that showed up for their appointment
summary(appts[appts$Status == "Show-Up",])
# The ratio between NoShow and ShowUp is: 90731: 209269
integer(noShow)/int(noShow)
# The ratio between NoShow and ShowUp is: 90731: 209269
nrow(No_Show) / nrow(Show_Up)
# The ratio between NoShow and ShowUp is: 90731: 209269
nrow(No_Show) / nrow(appts)
nrow(Show_Up) / nrow(appts)
# scatter plot, Age by dayDifference
plot(appts$Age, appts$dayDifference)
diff_in_weeks = as.numeric(difftime(appts$AppointmentDate,
appts$AppointmentRegistration,
units = "weeks"))
## Combining the appts data to the difference in weeks
apptDifference <- diff_in_weeks
## Combining the appts data to the difference in weeks
apptDifference <- diff_in_weeks
rm(diff_in_weeks)
## Combining the new vector, apptDifference to the appts dataframe
appts <- cbind(appts, apptDifference)
rm(apptDifference)
barplot(appts$apptDifference)
ggplot(appts, aes(apptDifference)) +
geom_histogram(binwidth = 5)
ggplot(appts, aes(apptDifference)) +
geom_histogram(binwidth = 1)
#histogram of apptDifference
ggplot(appts, aes(apptDifference)) +
geom_histogram(binwidth = 1)
## Import libraries
require(ggplot2)
require(ggmosaic)
require(tidyverse)
require(caret)
require(stats)
# prevent display of numbers in scientific notation
options(scipen = 999)
#histogram of apptDifference
ggplot(appts, aes(apptDifference)) +
geom_histogram(binwidth = 1)
mysats(appts$apptDifference)
mystats(appts$apptDifference)
# based on the mystats result, the Upper Level value of this variable is 8.7
# or 9, when rounded up
nrow(appts[appts$apptDifference > 9], )
# based on the mystats result, the Upper Level value of this variable is 8.7
# or 9, when rounded up
nrow(appts[appts$apptDifference > 8.7], )
## number of records with > 100 in age
appts[appts$Age > 100,])  # 27 records
## number of records with > 100 in age
appts[appts$Age > 100,]  # 27 records
## number of records with > 100 in age
appts[appts$age > 100,]  # 27 records
# based on the mystats result, the Upper Level value of this variable is 8.7
# or 9, when rounded up
nrow(appts[appts$apptDifference > 8.7], )
appts$apptDifference[appts$apptDifference > 8.7, ]
appts[appts$apptDifference > 8.7, ]
# based on the mystats result, the Upper Level value of this variable is 8.7
# or 9, when rounded up
nrow(appts[appts$apptDifference > 8.7, ])
require(ggplot2)
require(ggmosaic)
require(tidyverse)
require(caret)
require(stats)
# prevent display of numbers in scientific notation
options(scipen = 999)
ggplot2(appts, aes(y = Status, x = Gender)) +
geom_bar(stat = "identity")
ggplot(appts, aes(y = Status, x = Gender)) +
geom_bar(stat = "identity")
View(appts)
ggplot(appts, aes(y = Status, x = Gender, fill = Age)) +
geom_bar(stat = "identity")
ggplot(appts, aes(y = Status, x = Gender, fill = Status)) +
geom_bar(stat = "identity")
ggplot(appts, aes(y = Status, x = Gender, fill = Status)) +
geom_bar(stat = "identity") +
labs(y = "", title = "Breakdown of Gender by Status") +
theme_class()
ggplot(appts, aes(y = Status, x = Gender, fill = Status)) +
geom_bar(stat = "identity") +
labs(y = "", title = "Breakdown of Gender by Status") +
theme_classic()
ggplot(appts, aes(y = Status, x = Gender, fill = Status)) +
geom_bar(stat = "identity") +
labs(y = "Count of Status", title = "Breakdown of Gender by Status") +
theme_classic()
## number of records with > 100 in age
appts[appts$age > 100,]  # 27 records
## number of records with > 100 in age
appts[appts$Age > 100,]  # 27 records
## number of records with > 100 in age
nrow(appts[appts$Age > 100,])  # 27 records
nrow(appts[appts$Age < 1, ])
ggplot(appts, aes(Age)) +
geom_histogram(binwidth = 1)
ggplot(appts, aes(Age, fill = Gender)) +
geom_histogram(binwidth = 1)
ggplot(appts, aes(Age, fill = Gender)) +
geom_histogram(binwidth = 1) +
labs(y = "Count of Population",
title = "Histogram of Age by Gender") +
theme_classic()
hist(appts$apptDifference, xlim = c(0, 10), ks = 50,
main = "Histogram of Appointment Difference in Weeks",
xlab = "Difference in Weeks", ylab = "Frequency Count",
prob = TRUE)
# plotting probability distribution in Red
lines(density(appts$apptDifference), lwd = 2, col = "red")
